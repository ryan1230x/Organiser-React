[{"/var/www/html/2020-organiser/antd-design/src/index.js":"1","/var/www/html/2020-organiser/antd-design/src/reportWebVitals.js":"2","/var/www/html/2020-organiser/antd-design/src/App.js":"3","/var/www/html/2020-organiser/antd-design/src/pages/Home.js":"4","/var/www/html/2020-organiser/antd-design/src/layout/index.js":"5","/var/www/html/2020-organiser/antd-design/src/pages/CreateTicket.js":"6","/var/www/html/2020-organiser/antd-design/src/actions/ticketActions.js":"7","/var/www/html/2020-organiser/antd-design/src/actions/constants.js":"8","/var/www/html/2020-organiser/antd-design/src/store.js":"9","/var/www/html/2020-organiser/antd-design/src/reducers/index.js":"10","/var/www/html/2020-organiser/antd-design/src/reducers/commentReducer.js":"11","/var/www/html/2020-organiser/antd-design/src/reducers/historyReducer.js":"12","/var/www/html/2020-organiser/antd-design/src/reducers/ticketReducer.js":"13","/var/www/html/2020-organiser/antd-design/src/pages/ViewTicket.js":"14","/var/www/html/2020-organiser/antd-design/src/actions/commentActions.js":"15","/var/www/html/2020-organiser/antd-design/src/actions/historyActions.js":"16","/var/www/html/2020-organiser/antd-design/src/components/ViewTicket/ViewBreadCrumbs.js":"17","/var/www/html/2020-organiser/antd-design/src/components/ViewTicket/ViewDescriptions.js":"18","/var/www/html/2020-organiser/antd-design/src/components/ViewTicket/ViewAddComment.js":"19","/var/www/html/2020-organiser/antd-design/src/components/ViewTicket/ViewComments.js":"20","/var/www/html/2020-organiser/antd-design/src/components/ViewTicket/ViewTimeline.js":"21","/var/www/html/2020-organiser/antd-design/src/components/ViewTicket/ViewClosingComment.js":"22","/var/www/html/2020-organiser/antd-design/src/reducers/tagReducer.js":"23","/var/www/html/2020-organiser/antd-design/src/actions/tagActions.js":"24","/var/www/html/2020-organiser/antd-design/src/components/Home/SneakPeakDrawer.js":"25","/var/www/html/2020-organiser/antd-design/src/actions/pageActions.js":"26","/var/www/html/2020-organiser/antd-design/src/reducers/pageReducer.js":"27","/var/www/html/2020-organiser/antd-design/src/components/Home/TagDrawer.js":"28","/var/www/html/2020-organiser/antd-design/src/reducers/userReducer.js":"29","/var/www/html/2020-organiser/antd-design/src/actions/userActions.js":"30","/var/www/html/2020-organiser/antd-design/src/pages/Login.js":"31","/var/www/html/2020-organiser/antd-design/src/firebase.js":"32","/var/www/html/2020-organiser/antd-design/src/components/Loader/LoginLoader.js":"33","/var/www/html/2020-organiser/antd-design/src/hooks/index.js":"34"},{"size":617,"mtime":1610410351418,"results":"35","hashOfConfig":"36"},{"size":362,"mtime":1610281289092,"results":"37","hashOfConfig":"36"},{"size":4404,"mtime":1611232542946,"results":"38","hashOfConfig":"36"},{"size":6543,"mtime":1611232135937,"results":"39","hashOfConfig":"36"},{"size":1558,"mtime":1608570399852,"results":"40","hashOfConfig":"36"},{"size":8643,"mtime":1611066199445,"results":"41","hashOfConfig":"36"},{"size":2911,"mtime":1611148514018,"results":"42","hashOfConfig":"36"},{"size":865,"mtime":1611101168130,"results":"43","hashOfConfig":"36"},{"size":410,"mtime":1610281289092,"results":"44","hashOfConfig":"36"},{"size":536,"mtime":1610408977237,"results":"45","hashOfConfig":"36"},{"size":701,"mtime":1611256631538,"results":"46","hashOfConfig":"36"},{"size":516,"mtime":1611081441281,"results":"47","hashOfConfig":"36"},{"size":1191,"mtime":1611192095760,"results":"48","hashOfConfig":"36"},{"size":6568,"mtime":1611104857628,"results":"49","hashOfConfig":"36"},{"size":1461,"mtime":1611105512821,"results":"50","hashOfConfig":"36"},{"size":971,"mtime":1610281289088,"results":"51","hashOfConfig":"36"},{"size":823,"mtime":1610997680806,"results":"52","hashOfConfig":"36"},{"size":1290,"mtime":1610996386738,"results":"53","hashOfConfig":"36"},{"size":2789,"mtime":1611231550626,"results":"54","hashOfConfig":"36"},{"size":2491,"mtime":1611256519451,"results":"55","hashOfConfig":"36"},{"size":701,"mtime":1610281289088,"results":"56","hashOfConfig":"36"},{"size":3809,"mtime":1611231833577,"results":"57","hashOfConfig":"36"},{"size":943,"mtime":1610892755429,"results":"58","hashOfConfig":"36"},{"size":1626,"mtime":1611101646972,"results":"59","hashOfConfig":"36"},{"size":5784,"mtime":1611191202436,"results":"60","hashOfConfig":"36"},{"size":294,"mtime":1609943651267,"results":"61","hashOfConfig":"36"},{"size":457,"mtime":1610281289092,"results":"62","hashOfConfig":"36"},{"size":4368,"mtime":1610998014546,"results":"63","hashOfConfig":"36"},{"size":475,"mtime":1611232464325,"results":"64","hashOfConfig":"36"},{"size":261,"mtime":1610409960915,"results":"65","hashOfConfig":"36"},{"size":1000,"mtime":1610497220884,"results":"66","hashOfConfig":"36"},{"size":508,"mtime":1611256970686,"results":"67","hashOfConfig":"36"},{"size":438,"mtime":1610731943661,"results":"68","hashOfConfig":"36"},{"size":472,"mtime":1611066076307,"results":"69","hashOfConfig":"36"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},"17egiqb",{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"72"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"72"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"72"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"72"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"72"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"72"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"72"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"72"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"72"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"72"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"72"},{"filePath":"148","messages":"149","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/var/www/html/2020-organiser/antd-design/src/index.js",[],["150","151"],"/var/www/html/2020-organiser/antd-design/src/reportWebVitals.js",[],"/var/www/html/2020-organiser/antd-design/src/App.js",["152"],"import React, { useState, useEffect } from \"react\";\n\n// import stylesheets\nimport './App.css';\nimport 'antd/dist/antd.css';\n\n// import logo\nimport logo from \"./dtLogo.png\";\n\n// import components for routing\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n  Link\n} from \"react-router-dom\";\n\n// import redux and actions\nimport { connect } from \"react-redux\"\nimport { login, logout } from \"./actions/userActions\";\n\nimport { auth } from \"./firebase\";\n\n// Import Pages\nimport Home from \"./pages/Home\";\nimport CreateTicket from \"./pages/CreateTicket\";\nimport ViewTicket from \"./pages/ViewTicket\";\nimport Login from \"./pages/Login\";\n\n// Import Icons\nimport { \n    HomeOutlined,\n    EditOutlined,    \n    ImportOutlined\n} from \"@ant-design/icons\";\n\n// Import Components\nimport { Layout, Menu } from \"antd\";\nimport LoginLoader from \"./components/Loader/LoginLoader\";\nconst { Sider, Content, Footer } = Layout;\n\n\n// Menu Items, navigation links for Sider\nconst menuItems = [\n  {   \n    to: \"/\",\n    value: \"Home\",\n    icon: <HomeOutlined />\n  },\n  {   \n    to: \"/create\",\n    value: \"Create\",\n    icon: <EditOutlined />\n  }\n]\n\nfunction App({ \n  login, \n  logout, \n  users, \n  loadingUser\n}) {\n\n  /**\n  * Once the App is rendered check if the user is \n  * authenticated with Firebase\n  */\n  useEffect(() => {\n    auth.onAuthStateChanged(authUser => {\n      if (authUser) {\n        /**        \n        * User logged in add the information through\n        * the login action function\n        */\n        login({\n          uuid: authUser.uid,\n          photo: authUser.photoURL,\n          email: authUser.email,\n          displayName: authUser.displayName\n        });\n      } else {\n        /**\n        * User logged out\n        * use the logout action function\n        */\n        logout();\n      }\n    })\n  }, [])\n\n  /**\n  * Component state\n  */\n  const [collapsed, setCollapsed] = useState(false);\n\n  /**\n  * Helper function that toggles the sider collapse state\n  */\n  const handleCollapse = () => {\n    setCollapsed(!collapsed);\n  }\n\n  return (  \n    \n    // If the user is logged in display the page Home page\n    users === null ? (\n      // If the user data is loading display the loginloader\n      loadingUser ? (<LoginLoader />) : (<Login />)\n    ) : (\n    <Router>\n      <Layout style={{minHeight:\"100vh\"}}>\n        <Sider \n          style={{\n            background: \"white\", \n            position: \"fixed\", \n            top: 0, \n            bottom: 0, \n            left: 0\n          }} \n          collapsible \n          collapsed={collapsed} \n          onCollapse={handleCollapse}>\n          <img\n            className=\"side-logo\"\n            width={collapsed ? 80 : 200}\n            src={logo} \n            alt=\"Logo\"\n          />\n          <Menu \n            style={{height: \"100vh\"}} \n            defaultSelectedKeys={[\"0\"]} \n            theme={\"light\"}\n            mode=\"inline\"\n          >\n            {menuItems.map((item, index) => (\n              <Menu.Item \n                key={index} \n                icon={item.icon}\n              >\n                <Link to={item.to}>{item.value}</Link>\n              </Menu.Item>\n            ))}\n            <Menu.Item \n              key=\"3\"\n              icon={<ImportOutlined />}\n            >\n              <Link onClick={() => auth.signOut()}>Logout</Link>\n            </Menu.Item>            \n          </Menu>\n        </Sider>\n        <Layout>\n          <Content\n            className=\"main-content\"\n            style={{\n                paddingTop: 50,\n                paddingLeft: collapsed ? 102 : 232,\n                paddingRight: 32\n            }}>\n            <main>\n              <Switch>\n                <Route exact path=\"/\">\n                  <Home />\n                </Route>\n                <Route path=\"/create\">\n                  <CreateTicket />\n                </Route>\n                <Route path=\"/ticket/:id\" children={<ViewTicket />} />\n              </Switch>\n            </main>\n          </Content>\n          <Footer \n            style={{\n              textAlign: \"center\", \n              background: \"white\"\n            }}>\n              Made By Ryan Harper &copy; 2020\n            </Footer>\n        </Layout> \n      </Layout>\n    </Router>\n    )\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  users: state.users.users,\n  loadingUser: state.users.loading\n})\n\nexport default connect(mapStateToProps, { login, logout })(App);\n","/var/www/html/2020-organiser/antd-design/src/pages/Home.js",["153","154","155"],"import React, { useEffect, useState } from \"react\";\n\n// import components for routing\nimport { Link } from \"react-router-dom\";\n\n// import redux and actions\nimport { connect } from \"react-redux\";\nimport { getTicketInformation, getTickets } from \"../actions/ticketActions\";\nimport { getComments } from \"../actions/commentActions\";\nimport { addTag, getTags, getAllTags, deleteTag } from \"../actions/tagActions.js\";\n\n// Import icons\nimport { \n  TagsOutlined, \n  ExportOutlined,\n  HomeOutlined\n} from \"@ant-design/icons\";\n\n// Import Components\nimport SneakPeakDrawer from \"../components/Home/SneakPeakDrawer\";\nimport TagDrawer from \"../components/Home/TagDrawer\";\nimport { \n  PageHeader, \n  Table, \n  Tag, \n  Button,\n  Tooltip,\n  Space,\n  Empty,\n  Breadcrumb,\n  Form,\n  Input\n} from \"antd\";\n\n/**\n * Table Columns\n */\nconst tableColumns = [\n  {\n    key: \"client\",\n    title: \"Client\",\n    dataIndex: \"client\"\n  },\n  {\n    key: \"address\",\n    title: \"Address\",\n    dataIndex: \"address\",\n    ellipsis: true,\n    render: address => (<Tooltip title={address}>{address}</Tooltip>)\n  },\n  {\n    key: \"client package\",\n    title: \"Client Package\",\n    dataIndex: \"clientPackage\",\n    width: 200\n  },\n  {\n    key: \"tags\",\n    title: \"Tags\",\n    dataIndex: \"tags\",\n    render: (tags) => (\n      <>\n        {tags.map(item => (\n          <Tag\n            className=\"ticket-table-tags\"\n            color={item.color} \n            key={item.tag_id}\n          >\n            {item.tag}\n          </Tag>\n        ))}\n      </>\n    )\n  },\n  {\n    key: \"action\",\n    title: \"Action\",\n    dataIndex: \"action\"\n  }\n];\n\nfunction Home({\n    tickets,\n    comments,\n    ticketInformation,\n    addTag,\n    getTags,\n    deleteTag,\n    getAllTags,\n    tags,\n    getTickets,\n    getComments,\n    getTicketInformation,\n    loadingTickets,\n    ticketTags\n}) {\n\n  /**\n  * Component state\n  */\n  const [isVisible, setVisible] = useState(false);\n  const [isTagDrawerVisible, setTagDrawerVisible] = useState(false);\n  const [id, setId] = useState(\"\");\n  const [query, setQuery] = useState([]);\n\n  const [form] = Form.useForm();\n\n  /**\n  * Once the Home page is rendered run the functions\n  */\n  useEffect(() => {\n    getTickets();\n    getAllTags();\n  }, [getTickets])\n\n  /**\n   * Drawer functions\n   */\n  const showDrawer = () => {\n    setVisible(true);\n  };\n\n  const onClose = () => {\n    setVisible(false);\n  };\n\n  const showTagDrawer = () => {\n    setTagDrawerVisible(true);\n  };\n\n  const onCloseTagDrawer = () => {\n    setTagDrawerVisible(false);\n  };\n\n  /**\n   * filter table rows on search submit\n   */\n  const onSearchSubmit = (value) => {\n    const filter = value.toUpperCase();\n    const table = document.querySelector(\"table\");\n    const tableTr = table.querySelectorAll(\"tr\");\n\n    tableTr.forEach((value) => {\n      const td = value.getElementsByTagName(\"td\")[1];\n      if (td) {\n        const textValue = td.textContent\n        textValue.toUpperCase().indexOf(filter) > -1 ? \n          value.style.display = \"\" : \n          value.style.display = \"none\"        \n      }\n    });\n  };\n\n  /**\n   * Pageheader extra\n   */\n  const pageheaderExtra = [   \n    <Form method=\"GET\" form={form} key=\"1\">\n      <Form.Item name=\"q\">\n        <Input.Search\n          allowClear\n          onSearch={onSearchSubmit} \n          style={{ width: 300 }} \n          placeholder=\"search address here...\"\n        />\n      </Form.Item>\n    </Form>\n  ];\n\n  /**\n   * Show empty icon when there are not tickets,\n   * in other words when tickets === undefined or null\n   */\n  if (!tickets) { \n    return (\n      <section className=\"ticket-empty-icon\">\n        <Empty description=\"Congratulations! There are currently no pending installations\" />\n      </section>\n    );\n  }\n\n  /**\n   * Table data\n   */\n  const data = tickets.map((ticket, index) => {\n    const { ticketId, name, address, clientPackage, reference } = ticket;\n    return {\n      key: index,\n      client: `${reference} - ${name}`,\n      address,\n      clientPackage,\n      tags: tags.filter(tag => tag.ticketId === ticketId),      \n      action: (\n        <>\n        <Space wrap size={10}>          \n          <Button type=\"primary\">\n            <Link to={`/ticket/${ticketId}`}>Open Ticket</Link>\n          </Button>\n          <Tooltip title=\"Add Tag\">  \n            <Button \n              shape=\"circle\" \n              icon={<TagsOutlined />} \n              onClick={() => {\n                setId(ticketId);\n                getTags(ticketId);\n                showTagDrawer();\n              }} />\n          </Tooltip>\n          <Tooltip title=\"Sneak Peak\">\n            <Button \n              shape=\"circle\" \n              icon={<ExportOutlined />} \n              onClick={() => {                  \n                setId(ticketId);              \n                showDrawer();\n                getTags(ticketId);\n                getTicketInformation(ticketId);\n                getComments(ticketId);\n              }} />\n          </Tooltip>\n        </Space>\n        </>\n      )\n    }\n  });\n\n  return (\n    <>\n      {loadingTickets ? (\n        \"Loading...\"\n      ) : (\n        <>\n          <Breadcrumb>\n            <Breadcrumb.Item>\n              <HomeOutlined />\n              <span style={{ marginLeft: 8 }}>Home</span>\n            </Breadcrumb.Item>\n          </Breadcrumb>\n          <PageHeader\n            title=\"Home Page\"\n            subTitle={`${tickets.length} Pending Installations`}\n            extra={pageheaderExtra}\n          />\n          <Table tableLayout=\"fixed\" columns={tableColumns} dataSource={data} />\n          <SneakPeakDrawer \n            closable={false} \n            onClose={onClose} \n            visible={isVisible}            \n            ticketId={id}\n            ticketInformation={ticketInformation}\n            comments={comments}\n          />\n          <TagDrawer\n            handleAddTag={addTag}\n            handleDeleteTag={deleteTag}\n            tags={ticketTags}\n            closable={false}\n            onClose={onCloseTagDrawer}\n            visible={isTagDrawerVisible}\n            ticketId={id}\n          />\n        </>\n      )}\n    </>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  comments: state.comments.comments,\n  tickets: state.tickets.tickets,\n  ticketInformation: state.tickets.ticketInformation,\n  loadingTickets: state.tickets.loading,\n  tags: state.tags.tags,\n  ticketTags: state.tags.ticketTags,\n  users: state.users.users\n});\n\nexport default connect(mapStateToProps, { \n  getTickets, \n  getTicketInformation,\n  getComments,\n  addTag,\n  getTags,\n  deleteTag,\n  getAllTags\n})(Home);\n","/var/www/html/2020-organiser/antd-design/src/layout/index.js",[],"/var/www/html/2020-organiser/antd-design/src/pages/CreateTicket.js",["156","157"],"import React, { useState } from \"react\";\n\n//\nimport { Link } from \"react-router-dom\";\n\n// Import redux and actions\nimport { connect } from \"react-redux\";\nimport { addTicket } from \"../actions/ticketActions\";\n\n// Import icons\nimport { HomeOutlined, EditOutlined } from \"@ant-design/icons\";\n\n// Import Components\nimport { \n  Form, \n  Input, \n  Button, \n  DatePicker, \n  Select, \n  notification, \n  PageHeader, \n  InputNumber,\n  Breadcrumb\n} from \"antd\";\nconst { Option } = Select;\n\nfunction CreateTicket({ users, addTicket }) {\n  \n  /**\n   * Component State \n   */\n  const [reference, setReference]         = useState(null);\n  const [name, setname]                   = useState(\"\");\n  const [requestedDate, setrequestedDate] = useState(\"\");\n  const [address, setaddress]             = useState(\"\");\n  const [network, setnetwork]             = useState(\"\");\n  const [service, setservice]             = useState(\"\");\n  const [clientPackage, setclientPackage] = useState(\"\");\n  const [portability, setportability]     = useState(\"\");\n  const [contactNumber, setcontactNumber] = useState(null);\n  const [landline, setlandline]           = useState(null);\n\n  const [form] = Form.useForm();\n\n  /**\n   * Descontruct the users information \n   */\n  const { displayName } = users;\n\n  /**\n   * Network options\n   */\n  const networkOptions = [\n    {option: \"Layer4\",},\n    {option: \"MásMóvil Direct\"},\n    {option: \"MásMóvil NEBA\"}\n  ];\n\n  /**\n   * service options\n   */\n  const serviceOptions = [];\n\n  /**\n   * Package options \n   */\n  const packageOptions = [];\n\n  /**\n   * Portability options\n   */\n  const portabilityOptions = [\n    {option: \"Yes\"},\n    {option: \"No\"}\n  ];\n\n  /**\n   * Requested Date, date format\n   */\n  const dateFormatList = [\"DD/MM/YYYY\", \"DD/MM/YY\"];\n\n  /**\n   * @param {string} type of the notification success, info, error or warning\n   * @param {string} message of the notification\n   * @param {string | void} description of the notification\n   */\n  const openNotificationWithIcon = (type, message, description) => {\n    notification[type]({\n      message,\n      description\n    });\n  }\n\n  /**\n   * Create a new ticket\n   */\n  const setNewTicket = () => {\n    const newTicket = {\n      reference,\n      address,\n      name,\n      landline,\n      contactNumber,\n      network,\n      portability,\n      clientPackage,\n      requestedDate,\n      service,\n      status: \"Open\",\n      createdBy: displayName,\n    };\n    addTicket(JSON.stringify(newTicket));    \n  };\n  \n  /**\n   * Reset fields\n   */\n  const resetFields = () => {\n    form.resetFields();\n  };\n\n  /**\n   * On form submit\n   */\n  const onSubmit = () => {\n    setNewTicket();\n    resetFields();\n    openNotificationWithIcon(\n      \"success\",\n      \"Ticket Created Successfully\",\n      null\n    );\n  };\n\n  return (\n    <>\n      <Breadcrumb>\n        <Breadcrumb.Item>\n          <Link to=\"/\">\n            <HomeOutlined />\n            <span style={{marginLeft: 8}}>Home</span>\n          </Link>\n          </Breadcrumb.Item>\n          <Breadcrumb.Item>\n            <EditOutlined />\n            <span style={{marginLeft: 8}}>Create Ticket</span>\n        </Breadcrumb.Item>\n      </Breadcrumb>\n      <PageHeader\n        title=\"Create A Ticket\"\n        subTitle=\"Fill in the form to create a new ticket\"\n      />\n      <Form \n        form={form} \n        layout=\"vertical\" \n        onFinish={onSubmit}\n      >\n        {/* Client Reference */}\n        <Form.Item          \n          label=\"Client Reference\"\n          name=\"reference\"\n          rules={[\n            {\n              required: true,\n              message: \"Please fill in this field\",\n              type: \"number\"\n            }\n          ]}        \n        >\n          <InputNumber\n            min={0}             \n            onChange={(number) => setReference(number)} \n            value={reference}\n          />\n        </Form.Item>\n        {/* Name */}\n        <Form.Item\n          label=\"Name\"\n          name=\"name\"\n          rules={[\n            {\n              required: true,\n              message: \"Required\"\n            }\n          ]}\n        >\n          <Input \n            onChange={(e) => setname(e.target.value)} \n            value={name} \n            type=\"text\"\n          />\n        </Form.Item>\n        {/* Requested Date */}\n        <Form.Item\n          label=\"Requested Date\"\n          name=\"requestedDate\"\n          rules={[\n            {\n              required: true,\n              message: \"Required\",\n              type: \"object\"\n            }\n          ]}\n        >\n          <DatePicker \n            onChange={(_, dateString) => setrequestedDate(dateString)} \n            value={requestedDate}\n            format={dateFormatList}            \n          />\n        </Form.Item>\n        {/* Address */}\n        <Form.Item\n          label=\"Address\"\n          name=\"address\"\n          rules={[\n            {\n              required: true,\n              message: \"Required\"\n            }\n          ]}\n        >\n          <Input \n            onChange={(e) => setaddress(e.target.value)} \n            value={address} \n            type=\"text\"\n          />\n        </Form.Item>\n        {/* Network */}\n        <Form.Item\n          label=\"Network\"\n          name=\"network\"\n          rules={[\n            {\n              required: true,\n              message: \"Required\"\n            }\n          ]}\n        >\n          <Select \n            onChange={(value) => setnetwork(value)} \n            value={network}\n          >\n            {networkOptions.map((option, index) => (\n              <Option \n                value={option.option} \n                key={index}\n              >\n                {option.option}\n              </Option>\n            ))}\n          </Select>\n        </Form.Item>\n        {/* Service */}\n        <Form.Item\n          label=\"Service\"\n          name=\"service\"\n          rules={[\n            {\n              required: true,\n              message: \"Required\"\n            }\n          ]}\n        >\n          <Select \n            onChange={(value) => setservice(value)} \n            value={service}\n          >\n            <Option value=\"option1\">Option1</Option>\n            <Option value=\"option1\">Option1</Option>\n            <Option value=\"option1\">Option1</Option>\n          </Select>\n        </Form.Item>\n        {/* Package */}\n        <Form.Item\n          label=\"Package\"\n          name=\"clientPackage\"\n          rules={[\n            {\n              required: true,\n              message: \"Required\"\n            }\n          ]}\n        >\n          <Select \n            onChange={(value) => setclientPackage(value)} \n            value={clientPackage}\n          >\n            <Option value=\"option1\">Option1</Option>\n            <Option value=\"option1\">Option1</Option>\n            <Option value=\"option1\">Option1</Option>\n          </Select>\n        </Form.Item>\n        {/* Portability */}\n        <Form.Item\n          label=\"Portability\"\n          name=\"portability\"\n          rules={[\n            {\n              required: true,\n              message: \"Required\"\n            }\n          ]}\n        >\n          <Select \n            onChange={(value) => setportability(value)} \n            value={portability}\n          >\n            {portabilityOptions.map((option, index) => (\n              <Option \n                value={option.option} \n                key={index}\n              >\n                {option.option}\n              </Option>\n            ))}\n          </Select>\n        </Form.Item>\n        {/* Landline number */}\n        <Form.Item\n          label=\"Landline Number\"\n          name=\"landline\"\n          rules={[\n            {\n              type: \"number\",\n              required: true,\n              message: \"Required\"\n            }\n          ]}\n        >\n          <InputNumber \n            onChange={(number) => setlandline(number)} \n            value={landline} \n          />\n        </Form.Item>\n        {/* Contact number */}\n        <Form.Item\n          label=\"Contact Number\"\n          name=\"contactNumber\"\n          rules={[\n            {\n              type: \"number\",\n              required: true,\n              message: \"Required\",\n              min:0\n            }\n          ]}\n        >\n          <InputNumber \n            onChange={(number) => setcontactNumber(number)} \n            value={contactNumber}\n          />\n        </Form.Item>\n        <Form.Item>\n          <Button type=\"primary\" htmlType=\"submit\">\n            Submit\n          </Button>\n        </Form.Item>\n      </Form>\n    </>\n  )\n}\n\nconst mapStateToProps = (state) => ({\n  users: state.users.users\n});\n\nexport default connect(mapStateToProps, { addTicket })(CreateTicket);\n","/var/www/html/2020-organiser/antd-design/src/actions/ticketActions.js",[],"/var/www/html/2020-organiser/antd-design/src/actions/constants.js",[],"/var/www/html/2020-organiser/antd-design/src/store.js",[],"/var/www/html/2020-organiser/antd-design/src/reducers/index.js",[],"/var/www/html/2020-organiser/antd-design/src/reducers/commentReducer.js",["158"],"/var/www/html/2020-organiser/antd-design/src/reducers/historyReducer.js",["159"],"import * as constant from \"../actions/constants\";\n\nconst initialState = {\n  histories: [],\n  loading: true\n};\n\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case constant.GET_HISTORY:\n      return {\n        ...state,\n        histories: action.payload,\n        loading: false\n      };\n    case constant.ADD_HISTORY:\n      return {\n        ...state,\n        histories: [action.payload, ...state.histories],\n        loading: false\n      };\n    default:\n      return state;\n  }\n}\n","/var/www/html/2020-organiser/antd-design/src/reducers/ticketReducer.js",["160"],"import * as constant from \"../actions/constants\";\n\nconst initialState = {\n  tickets: [],\n  ticketInformation: {},\n  loading: true\n};\n\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case constant.GET_TICKETS:\n      return {\n        ...state,\n        tickets: action.payload,\n        loading: false\n      };\n    case constant.GET_TICKET_INFORMATION:\n      return {\n        ...state,\n        ticketInformation: action.payload,\n        loading: false\n      };\n    case constant.SEARCH_FOR_TICKET:\n      return {\n        ...state,\n        tickets: action.payload,\n        loading: false\n      };\n    case constant.CLOSE_TICKET:\n      return {\n        ...state,\n        ticketInformation: action.payload,\n        tickets: state.tickets.filter(ticket => ticket.ticketId !== action.payload.ticketId),\n        loading: false\n      };\n    case constant.ADD_TICKET:\n      return {\n        ...state,\n        tickets: [action.payload, ...state.tickets],\n        loading: false\n      };\n    case constant.REOPEN_TICKET:\n      return {\n        ...state,\n        ticketInformation: action.payload,\n        loading: false\n      }\n    default:\n      return state;\n  }\n}\n","/var/www/html/2020-organiser/antd-design/src/pages/ViewTicket.js",["161"],"import React, { useEffect, useState } from \"react\";\n\n// import components for routing\nimport { useParams } from \"react-router-dom\";\n\n// import redux and actions\nimport { connect } from \"react-redux\";\nimport { getComments, addComment, deleteComment } from \"../actions/commentActions\";\nimport { getTicketInformation, putTicketStatusToClosed, putTicketStatusToOpen } from \"../actions/ticketActions\";\nimport { getHistory, addHistory } from \"../actions/historyActions\";\nimport { getTags, addTag, deleteTag } from \"../actions/tagActions\";\n\n// Import Components\nimport ViewBreadCrumbs from \"../components/ViewTicket/ViewBreadCrumbs\";\nimport ViewDescriptions from \"../components/ViewTicket/ViewDescriptions\";\nimport ViewAddComment from \"../components/ViewTicket/ViewAddComment\";\nimport ViewComments from \"../components/ViewTicket/ViewComments\";\nimport ViewTimeline from \"../components/ViewTicket/ViewTimeline\";\nimport ViewClosingComment from \"../components/ViewTicket/ViewClosingComment\";\nimport TagDrawer from \"../components/Home/TagDrawer.js\";\n\nimport { TagsOutlined } from \"@ant-design/icons\";\n\n// Import Components\nimport {\n  PageHeader,\n  Row,\n  Col,\n  Button,  \n  Tag,\n  notification\n} from \"antd\";\n\nfunction ViewTicket({\n  addComment,\n  addHistory,  \n  getComments,\n  addTag,\n  getHistory,\n  getTicketInformation,\n  getTags,\n  comments,\n  histories,\n  ticketTags,\n  ticketInformation,\n  loadingComments,\n  loadingHistories,\n  loadingTags,\n  putTicketStatusToClosed,\n  putTicketStatusToOpen,\n  deleteTag,\n  users\n}) {\n\n  /**\n  * Component state\n  */\n  const [isTagDrawerVisible, setTagDrawerVisible] = useState(false);\n\n  /**\n  * Get the ticket id from the URL\n  * URL-> /ticket/:id\n  */   \n  const { id } = useParams();\n\n  /**\n  * Once the Home page is rendered run the functions\n  */\n  useEffect(() => {\n    getTicketInformation(id);\n    getComments(id);\n    getHistory(id);\n    getTags(id);\n  }, [getTicketInformation, getComments, getHistory, getTags, id]);\n\n  /**\n  * Deconstruct ticket information\n  */\n  const { \n    reference,\n    address, \n    name, \n    landline, \n    contactNumber,\n    network,\n    portability,\n    clientPackage,\n    requestedDate,\n    service,\n    status,\n    createdBy\n  } = ticketInformation;\n\n  /**\n   * helper functions to open and close drawer\n   */\n  const onTagClose = () => {\n    setTagDrawerVisible(false);\n  };\n\n  const showTagDrawer = () => {\n    setTagDrawerVisible(true);\n  };\n\n  /**\n   * Set Notification\n   * @param {string} type of the notification success, info, error or warning\n   * @param {string} message of the notification\n   * @param {string | void} description of the notification\n   */\n  const openNotificationWithIcon = (type, message, description) => {\n    notification[type]({\n      message,\n      description\n    });\n  }\n\n  /**\n   * Reopen closed ticket\n   */\n  const onClickReopenTicket = () => {\n    const updatedTicketInformation = {\n      reference,\n      address,\n      name,\n      landline,\n      contactNumber,\n      network,\n      portability,\n      clientPackage,\n      requestedDate,\n      service,\n      status: \"Open\",\n      createdBy\n    };\n    putTicketStatusToOpen(JSON.stringify(updatedTicketInformation), id);\n    openNotificationWithIcon(\"info\", \"Ticket Reopened\", null);\n  };\n\n  /**\n   * PageHeader extra actions\n   */\n  const pageheaderExtra = [\n    status === \"Closed\" ? (\n      <Button\n        key=\"1\"\n        type=\"primary\"\n        onClick={() => onClickReopenTicket()}\n      >\n        Reopen Ticket\n      </Button>\n    ) : (\n      <Button\n        key=\"2\"\n        icon={<TagsOutlined />}                  \n        onClick={showTagDrawer}\n      >\n        Add Ticket Tag\n      </Button>\n    )\n  ];\n\n  return (\n    <>\n      {/*\n        if the comments, histories or tags are loading display\n        loading message otherwise display the ticket information\n      */}\n      { loadingComments && loadingHistories && loadingTags ? (\n        \"Loading...\"\n      ) : (\n      <>\n        <Row>\n          <Col span={17}>\n            <ViewBreadCrumbs\n              ticketInformation={ticketInformation}\n            />\n            <PageHeader\n              onBack={() => window.history.back()}\n              title={`${reference} ${name}`}              \n              style={{marginBottom: 32}}\n              extra={pageheaderExtra}\n              tags={\n                ticketTags.map((tag, index) => (\n                  <Tag \n                    key={index} \n                    color={tag.color}\n                  >\n                    {tag.tag}\n                  </Tag>\n                ))\n              }\n            />\n            {}\n            <ViewDescriptions\n              ticketInformation={ticketInformation}\n            />\n          </Col>\n          <Col span={17}>\n            <ViewAddComment              \n              handleAddHistory={addHistory}\n              handleAddComment={addComment}\n              ticketId={id}\n            />\n            <ViewComments \n              comments={comments}\n              usersInfo={users}\n            />\n          </Col>\n          <Col span={5}>\n            <ViewTimeline\n              histories={histories}\n            />\n          </Col>\n        </Row>\n        <Row>          \n          <Col\n            span={17}\n            style={{margin: \"32px 0px\"}}\n          >            \n            {status === \"Open\" && (              \n              <ViewClosingComment\n                handlePutTicketStatusToClosed={putTicketStatusToClosed}\n                ticketInformation={ticketInformation}\n                handleAddComment={addComment}\n                handleAddHistory={addHistory}\n                ticketId={id}\n              />)}            \n          </Col>\n        </Row>\n        <TagDrawer\n          handleAddTag={addTag}\n          handleDeleteTag={deleteTag}\n          tags={ticketTags}\n          closable={false}\n          onClose={onTagClose}\n          visible={isTagDrawerVisible}\n          ticketId={id}\n        />\n      </>\n      )}\n    </>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  comments: state.comments.comments,\n  ticketInformation: state.tickets.ticketInformation,\n  histories: state.histories.histories,\n  ticketTags: state.tags.ticketTags,\n  loadingComments: state.comments.loading,\n  loadingHistories: state.histories.loading,\n  loadingTags: state.tags.loading,\n  users: state.users.users\n});\n\nexport default connect(mapStateToProps, {\n  addComment,  \n  addHistory,\n  addTag,\n  putTicketStatusToClosed,\n  putTicketStatusToOpen,\n  getComments,\n  getHistory,\n  getTicketInformation,\n  getTags,\n  deleteTag\n})(ViewTicket);\n","/var/www/html/2020-organiser/antd-design/src/actions/commentActions.js",[],"/var/www/html/2020-organiser/antd-design/src/actions/historyActions.js",[],"/var/www/html/2020-organiser/antd-design/src/components/ViewTicket/ViewBreadCrumbs.js",[],"/var/www/html/2020-organiser/antd-design/src/components/ViewTicket/ViewDescriptions.js",[],"/var/www/html/2020-organiser/antd-design/src/components/ViewTicket/ViewAddComment.js",[],"/var/www/html/2020-organiser/antd-design/src/components/ViewTicket/ViewComments.js",[],"/var/www/html/2020-organiser/antd-design/src/components/ViewTicket/ViewTimeline.js",[],"/var/www/html/2020-organiser/antd-design/src/components/ViewTicket/ViewClosingComment.js",["162"],"import React, { useState } from \"react\"\nimport moment from \"moment\";\n\n// import redux\nimport { useStore } from \"react-redux\";\n\n// Import icons\nimport { CheckOutlined } from \"@ant-design/icons\"\n\n// Import Components\nimport { \n  Form, \n  Input, \n  Typography, \n  Button,\n  notification\n} from \"antd\";\nconst { TextArea } = Input\nconst { Title } = Typography  \n\nfunction ViewClosingComment({\n  handleAddComment, \n  handleAddHistory, \n  ticketId,\n  ticketInformation,\n  handlePutTicketStatusToClosed\n}) {\n\n  /**\n   * Component state\n   */\n  const [closingComment, setClosingComment] = useState(\"\"); \n  const [form] = Form.useForm();\n\n  /**\n   * Get current User\n   */\n  const { displayName } = useStore().getState().users.users;\n\n  /**\n   * Decontruct ticket information\n   */\n  const { \n    reference,\n    address, \n    name, \n    landline, \n    contactNumber,\n    network,\n    portability,\n    clientPackage,\n    requestedDate,\n    service,\n    status,\n    createdBy\n  } = ticketInformation;\n\n  /**\n   * Reset the form\n   */\n  const resetForm = () => {\n    form.resetFields();\n  };\n\n  /**\n   * Set Notification\n   * @param {string} type of the notification success, info, error or warning\n   * @param {string} message of the notification\n   * @param {string | void} description of the notification\n   */\n  const openNotificationWithIcon = (type, message, description) => {\n    notification[type]({\n      message,\n      description\n    });\n  }\n\n  /**\n   * Change the status to 'Closed'\n   */\n  const postClosingCommentHistory = () => {\n    const closingCommentHistoryObject = {\n      author: displayName,\n      action: \"closed the ticket\",\n      ticketId,\n      addedAt: moment().format('MMMM Do YYYY, h:mm:ss a')\n    };\n    handleAddHistory(JSON.stringify(closingCommentHistoryObject));\n  };\n\n  /**\n   * Add closing comment\n   */\n  const postClosingComment = () => {\n    const closingCommentObject = {\n      author: displayName,\n      comment: closingComment,\n      ticketId,\n      addedAt: moment().format('MMMM Do YYYY, h:mm:ss a')\n    };\n    handleAddComment(JSON.stringify(closingCommentObject), ticketId);\n  };\n\n  /**\n   * Updated ticket information\n   */\n  const updatedTicketInformation = () => {\n    const updatedTicketInformation = {\n      reference,\n      address,\n      name,\n      landline,\n      contactNumber,\n      network,\n      portability,\n      clientPackage,\n      requestedDate,\n      service,\n      status: \"Closed\",\n      createdBy\n    };\n    handlePutTicketStatusToClosed(JSON.stringify(updatedTicketInformation), ticketId);\n    openNotificationWithIcon(\"info\", \"Ticket Closed\", null)\n  };\n\n  /**\n   * Add closing comment and history on form submit\n   */\n  const addClosingComment = () => {\n    updatedTicketInformation();\n    postClosingComment();\n    postClosingCommentHistory();\n    resetForm();\n  };\n\n  return (\n    <>\n      <Title level={3}>Closing Comment</Title>\n      <Form \n        form={form}\n        layout=\"vertical\" \n        onFinish={addClosingComment} \n        style={{marginBottom: 32}}\n      >\n        <Form.Item\n          name=\"closing-comment\"\n          label=\"Closing Comment\"\n          rules={[\n            {\n              required: true,\n              message: \"Can not be empty!\"\n            }\n          ]}\n        >\n          <TextArea\n            rows={4}\n            placeholder=\"Add a closing comment here\"\n            value={closingComment}\n            onChange={(e) => setClosingComment(e.target.value)}\n          />\n        </Form.Item>\n        <Form.Item>\n          <Button \n            htmlType=\"submit\" \n            type=\"primary\" \n            style={{float: \"right\"}}\n            icon={<CheckOutlined />}\n          >\n            Add Closing Comment\n          </Button>\n        </Form.Item>\n      </Form>\n    </>\n  )\n}\n\nexport default ViewClosingComment;\n","/var/www/html/2020-organiser/antd-design/src/reducers/tagReducer.js",["163"],"import * as constant from \"../actions/constants\";\n\nconst intitalState = {\n  tags: [],\n  ticketTags:[],\n  loading: true,\n}\n\nexport default function(state = intitalState, action) {\n  switch (action.type) {\n    case constant.GET_TAGS:\n      return {\n        ...state,\n        ticketTags: action.payload,\n        loading: false,\n      };\n    case constant.GET_ALL_TAGS:\n      return {\n        ...state,\n        tags: action.payload,\n        loading:false\n      };\n    case constant.ADD_TAG:\n      return {\n        ...state,\n        ticketTags: [action.payload, ...state.ticketTags],\n        tags: [action.payload, ...state.tags],\n        loading: false\n      }\n    case constant.DELETE_TAG:\n      return {\n        ...state,\n        ticketTags: state.ticketTags.filter(tag => tag.tag_id !== action.payload),\n        tags: state.tags.filter(tag => tag.tag_id !== action.payload),\n        loading: false\n      };\n    default:\n      return state\n  }\n}","/var/www/html/2020-organiser/antd-design/src/actions/tagActions.js",[],"/var/www/html/2020-organiser/antd-design/src/components/Home/SneakPeakDrawer.js",[],"/var/www/html/2020-organiser/antd-design/src/actions/pageActions.js",[],"/var/www/html/2020-organiser/antd-design/src/reducers/pageReducer.js",["164"],"import * as constant from \"../actions/constants\";\n\nconst initialState = {\n  theme: \"light\",\n  loading: true,\n};\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n      case constant.SET_LIGHT_THEME:\n        return {\n          ...state,\n          theme: \"light\"\n        }\n      case constant.SET_DARK_THEME:\n          return {\n            ...state,\n            theme: \"dark\"\n          }\n    default:\n      return state;\n  }\n}\n","/var/www/html/2020-organiser/antd-design/src/components/Home/TagDrawer.js",[],"/var/www/html/2020-organiser/antd-design/src/reducers/userReducer.js",["165"],"import * as constant from \"../actions/constants\";\n\nconst intitalState = {\n  users: null,\n  loading: true\n}\n\nexport default function(state = intitalState, action) {\n  switch (action.type) {\n    case constant.USER_LOGGED_IN:\n      return {\n        ...state,\n        users: action.payload,\n        loading: false\n      }\n    case constant.USER_LOGGED_OUT:\n      return {\n        ...state,\n        users: null,\n        loading: false\n      }\n    default:\n      return state\n  }\n}","/var/www/html/2020-organiser/antd-design/src/actions/userActions.js",[],"/var/www/html/2020-organiser/antd-design/src/pages/Login.js",[],"/var/www/html/2020-organiser/antd-design/src/firebase.js",["166"],"/var/www/html/2020-organiser/antd-design/src/components/Loader/LoginLoader.js",["167"],"import React from 'react'\n\n// import logo\nimport logo from \"../../dtLogo.png\";\n\nfunction LoginLoader() {\n  return (\n    <div style={{\n      position:\"absolute\",\n      top:\"50%\",\n      left:\"50%\",\n      transform: \"translate(-50%, -50%)\"\n    }}>\n      <div style={{ textAlign: \"center\" }}>\n        <img src={logo} />\n        <h1>Redirecting to the application. Please wait...</h1>\n      </div>\n    </div>\n  )\n}\n\nexport default LoginLoader\n","/var/www/html/2020-organiser/antd-design/src/hooks/index.js",["168"],{"ruleId":"169","replacedBy":"170"},{"ruleId":"171","replacedBy":"172"},{"ruleId":"173","severity":1,"message":"174","line":89,"column":6,"nodeType":"175","endLine":89,"endColumn":8,"suggestions":"176"},{"ruleId":"177","severity":1,"message":"178","line":104,"column":10,"nodeType":"179","messageId":"180","endLine":104,"endColumn":15},{"ruleId":"177","severity":1,"message":"181","line":104,"column":17,"nodeType":"179","messageId":"180","endLine":104,"endColumn":25},{"ruleId":"173","severity":1,"message":"182","line":114,"column":6,"nodeType":"175","endLine":114,"endColumn":18,"suggestions":"183"},{"ruleId":"177","severity":1,"message":"184","line":62,"column":9,"nodeType":"179","messageId":"180","endLine":62,"endColumn":23},{"ruleId":"177","severity":1,"message":"185","line":67,"column":9,"nodeType":"179","messageId":"180","endLine":67,"endColumn":23},{"ruleId":"186","severity":1,"message":"187","line":8,"column":1,"nodeType":"188","endLine":31,"endColumn":2},{"ruleId":"186","severity":1,"message":"187","line":8,"column":1,"nodeType":"188","endLine":25,"endColumn":2},{"ruleId":"186","severity":1,"message":"187","line":9,"column":1,"nodeType":"188","endLine":51,"endColumn":2},{"ruleId":"177","severity":1,"message":"189","line":8,"column":35,"nodeType":"179","messageId":"180","endLine":8,"endColumn":48},{"ruleId":"177","severity":1,"message":"190","line":54,"column":5,"nodeType":"179","messageId":"180","endLine":54,"endColumn":11},{"ruleId":"186","severity":1,"message":"187","line":9,"column":1,"nodeType":"188","endLine":40,"endColumn":2},{"ruleId":"186","severity":1,"message":"187","line":8,"column":1,"nodeType":"188","endLine":23,"endColumn":2},{"ruleId":"186","severity":1,"message":"187","line":8,"column":1,"nodeType":"188","endLine":25,"endColumn":2},{"ruleId":"177","severity":1,"message":"191","line":12,"column":7,"nodeType":"179","messageId":"180","endLine":12,"endColumn":18},{"ruleId":"192","severity":1,"message":"193","line":15,"column":9,"nodeType":"194","endLine":15,"endColumn":27},{"ruleId":"195","severity":2,"message":"196","line":14,"column":3,"nodeType":"179","messageId":"197","endLine":14,"endColumn":15},"no-native-reassign",["198"],"no-negated-in-lhs",["199"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'login' and 'logout'. Either include them or remove the dependency array. If 'login' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["200"],"no-unused-vars","'query' is assigned a value but never used.","Identifier","unusedVar","'setQuery' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getAllTags'. Either include it or remove the dependency array. If 'getAllTags' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["201"],"'serviceOptions' is assigned a value but never used.","'packageOptions' is assigned a value but never used.","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","'deleteComment' is defined but never used.","'status' is assigned a value but never used.","'firebaseApp' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-undef","'notification' is not defined.","undef","no-global-assign","no-unsafe-negation",{"desc":"202","fix":"203"},{"desc":"204","fix":"205"},"Update the dependencies array to be: [login, logout]",{"range":"206","text":"207"},"Update the dependencies array to be: [getAllTags, getTickets]",{"range":"208","text":"209"},[1803,1805],"[login, logout]",[2212,2224],"[getAllTags, getTickets]"]